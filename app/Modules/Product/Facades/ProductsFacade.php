<?php


namespace App\Modules\Product\Facades;


use App\Facades\ModuleFacade;
use App\Models\Product;
use App\Models\ProductStatus;
use App\Services\ReportService;
use Barryvdh\DomPDF\Facade as PDF;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;

class ProductsFacade extends ModuleFacade
{
    protected function model(): string
    {
        return Product::class;
    }

    /**
     * @return mixed
     */
    public function getProductsWithRelations()
    {
        return $this->model->with(['user', 'client', 'category', 'product_status', 'problem_type'])->get();
    }

    /**
     * @param int $page
     * @return mixed
     */
    public function getProductsWithRelationsPageable($page = 15)
    {
        return $this->model->with(['user', 'client', 'category', 'product_status', 'problem_type'])->paginate($page);
    }

    /**
     * @param string $deleted
     * @return mixed
     */
    public function productsWithRelations(string $deleted = '')
    {
        $res = $this->model;
        if ($deleted){
            $res = $res->onlyTrashed();
        }
        $res = $res->with(['user', 'client', 'category', 'product_status', 'problem_type']);
        return $res;
    }
    /**
     * @param string $id
     * @param int $page
     * @return mixed
     */
    public function getProductsByIdWithRelationsPageable(string $id, $page = 15)
    {
        return $this->model->with(['user', 'client', 'category', 'product_status', 'problem_type'])
            ->where('id', $id)->paginate($page);
    }

    /**
     * @param array $data
     * @return Product
     */
    public function create(array $data): Product
    {
        try {
            $this->authorize('create', Product::class);
        } catch (AuthorizationException $e) {
            Log::error(auth()->user()->email. ' tried to create the job');
        }
        $data['images'] = json_encode($data['images']);
        return $this->model->create($data);
    }

    /**
     * @param Product $product
     * @param array $data
     */
    public function update(Product $product, array $data)
    {
        try {
            $this->authorize('update', $product);
        } catch (AuthorizationException $e) {
            Log::error(auth()->user()->email. ' tried to update the job with id: ' . $product->id);
        }
        $data['images'] = json_encode($data['images']);
        $product->update($data);
    }

    /**
     * @param array|int $ids
     * @return mixed
     */
    public function delete($ids)
    {
        try {
            $this->authorize('delete', $this->findOrFail($ids));
        } catch (AuthorizationException $e) {
            Log::error(auth()->user()->email. ' tried to delete the job with id: ' . $ids);
        }
        return parent::delete($ids); // TODO: Change the autogenerated stub
    }

    /**
     * @param int $id
     */
    public function claim(int $id)
    {
        $product = $this->findOrFail($id);
        try {
            $this->authorize('claim', $product);
        } catch (AuthorizationException $e) {
            Log::error(auth()->user()->email. ' tried to claim the job with id: ' . $id);
        }
        $product->user_id = auth()->id();
        $product->claimed_at = now();
        Log::info(auth()->user()->email.' claimed the job with id ' . $id);
        $product->save();
    }

    /**
     * @param int $id
     */
    public function disclaim(int $id)
    {
        $product = $this->findOrFail($id);
        try {
            $this->authorize('disclaim', $product);
        } catch (AuthorizationException $e) {
            Log::error(auth()->user()->email. ' tried to disclaim the job with id: ' . $id);
        }
        $product->user_id = null;
        $product->claimed_at = null;
        Log::info(auth()->user()->email.' disclaimed the job with id ' . $id);
        $product->save();
    }

    /**
     * @param int $id
     */
    public function restore(int $id)
    {
        $product = $this->onlyTrashed()->findOrFail($id);
        try {
            $this->authorize('restore', $product);
        } catch (AuthorizationException $e) {
            Log::error(auth()->user()->email. ' tried to restore the job with id: ' . $id);
        }
        $product->restore();
        $product->save();
    }

    /**
     * @param int $product_id
     * @param int $status_id
     */
    public function updateStatus(int $product_id, int $status_id)
    {
        $validator = Validator::make(
            [
                'status' => $status_id,
                'product' => $product_id,
            ],
            [
                'status' => ['required', 'exists:product_statuses,id'],
                'product' => ['required', 'exists:products,id'],
            ]
        );

        if (!$validator->fails()){
            $product = $this->findOrFail($product_id);
            $product->product_status_id = $status_id;
            if ($status_id == ProductStatus::REPAIRED){
                $product->finished_at = now();
                Log::info(auth()->user()->email.' finished the job with id ' . $product_id);
            }
            $product->save();
        }
    }

    /**
     * @return mixed
     */
    public function onlyTrashed()
    {
        return $this->model->onlyTrashed();
    }

    /**
     * @param Product $product
     * @param ReportService $service
     */
    public function makeReport(Product $product)
    {
        try {
            $this->authorize('makeReport', $product);
        } catch (AuthorizationException $e) {
            Log::error(auth()->user()->email. ' tried to make report the job with id: ' . $product->id);
            abort(404);
        }
        $pdf = PDF::loadView('pdf.product', compact('product'))
            ->setOptions([
                'isHtml5ParserEnabled' => true,
                'isRemoteEnabled' => true,
                'defaultFont' => 'sans-serif'
            ]);
        return $pdf->download('report.pdf');
    }
}
